package cn.javgo.mall.dao;

import cn.javgo.mall.model.PmsProductAttributeValue;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

/**
 * 商品属性值管理自定义 Dao
 * <p>
 * 这里总体介绍一下商品类型部分的设计思路以及相关表的设计：
 * <p>
 * 商品类型即商品属性，主要是指商品的规格和参数。规格和参数的区别在于，规格是在前端页面可以选择的（用于用户下单时选择），而参数是在前端页面
 * 不可选择的（用于标示商品属性以及搜索筛选）。比如说，商品类型为手机，那么：
 *      规格：颜色、内存、版本、套餐等
 *      参数：CPU、屏幕尺寸、后置摄像头、前置摄像头等
 * <p>
 * 相关表的设计如下：（自行对照数据库中的表结构）
 * 1.商品属性分类表：pms_product_attribute_category
 *   作用：用于存储商品属性分类，比如手机、电脑、图书等
 *   字段：
 *      id：主键
 *      name：分类名称，比如手机、电脑、图书等
 *      attribute_count：属性数量，比如手机分类下有颜色、内存、版本、套餐等属性，那么这里的属性数量就是4（用户在前端页面可选择）
 *      param_count：参数数量，比如手机分类下有CPU、屏幕尺寸、后置摄像头、前置摄像头等参数，那么这里的参数数量就是4（用户在前端页面不可选择）
 * 2.商品属性表：pms_product_attribute
 *   作用：用于存储商品属性，该表既可以存储规格，也可以存储参数，使用 type 字段区分
 *   字段：
 *      id：主键
 *      product_attribute_category_id：商品属性分类 id，用于关联商品属性分类表
 *      name：属性名称
 *          如果是规格，那么这里就是规格名称，比如颜色、内存、版本、套餐等；
 *          如果是参数，那么这里就是参数名称，比如CPU、屏幕尺寸、后置摄像头、前置摄像头等
 *      select_type：属性选择类型：0->唯一；1->单选；2->多选
 *          如果是规格，那么这里就是选择类型，比如颜色、内存、版本、套餐等都是单选，所以这里的值就是1；
 *          如果是参数，那么这里就是输入类型，比如CPU、屏幕尺寸、后置摄像头、前置摄像头等都是输入类型，所以这里的值就是0
 *      input_type：属性录入方式：0->手工录入；1->从列表中选取
 *          如果是规格，那么这里就是录入方式，比如颜色、内存、版本、套餐等都是从列表中选取，所以这里的值就是1；
 *          如果是参数，那么这里就是录入方式，比如CPU、屏幕尺寸、后置摄像头、前置摄像头等都是手工录入，所以这里的值就是0
 *      input_list：可选值列表，以逗号隔开
 *          如果是规格，那么这里就是可选值列表，比如颜色、内存、版本、套餐等都是从列表中选取，所以这里的值就是红色,白色,黑色,金色,蓝色；
 *          如果是参数，那么这里就是可选值列表，比如CPU、屏幕尺寸、后置摄像头、前置摄像头等都是手工录入，所以这里的值就是空
 *      sort：排序字段：最高的可以单独上传图片，即为主图（这里的排序字段是为了在前端页面展示时，按照一定的顺序排列）
 *          如果是规格，那么这里就是排序字段，比如颜色、内存、版本、套餐等都是按照一定的顺序排列，所以这里的值就是1,2,3,4,5；
 *          如果是参数，那么这里就是排序字段，比如CPU、屏幕尺寸、后置摄像头、前置摄像头等都是按照一定的顺序排列，所以这里的值就是1,2,3,4
 *      filter_type：分类筛选样式：0->普通；1->颜色
 *          如果是规格，那么这里就是分类筛选样式，比如颜色、内存、版本、套餐等都是颜色，所以这里的值就是1；
 *          如果是参数，那么这里就是分类筛选样式，比如CPU、屏幕尺寸、后置摄像头、前置摄像头等都是普通，所以这里的值就是0
 *      search_type：检索类型；0->不需要进行检索；1->关键字检索；2->范围检索（这里的检索类型是为了在前端页面进行搜索时，按照一定的规则进行搜索）
 *          0：不需要进行检索，比如颜色、内存、版本、套餐等都不需要进行检索，所以这里的值就是0；
 *          1：关键字检索，比如CPU、屏幕尺寸、后置摄像头、前置摄像头等都是关键字检索，所以这里的值就是1；
 *          2：范围检索，比如价格、重量等都是范围检索，所以这里的值就是2；
 *      related_status：相同属性产品是否关联；0->不关联；1->关联
 *          如果是规格，那么这里就是相同属性产品是否关联，比如颜色、内存、版本、套装等都是相同属性产品关联
 *          如果是参数，那么这里就是相同属性产品是否关联，比如CPU、屏幕尺寸、后置摄像头、前置摄像头等都不是相同属性产品关联
 *      hand_add_status：是否支持手动新增；0->不支持；1->支持
 *          有些商品的属性是固定的，比如颜色、内存、版本、套装等都是固定的，所以这里的值就是0；
 *          有些商品的属性是不固定的，比如CPU、屏幕尺寸、后置摄像头、前置摄像头等都是不固定的，所以这里的值就是1
 *      type：属性类型；0->规格；1->参数
 * 3.商品属性值表：pms_product_attribute_value
 *   作用：用于存储商品属性值，该表既可以存储规格值，也可以存储参数值，使用 type 字段区分。如果对应的商品属性是规格且支持手动新增，那么该表
 *   中就可以手动新增规格值。如果对应的商品属性是参数且支持手动新增，那么该表中就可以手动新增参数值
 *   字段：
 *      id：主键
 *      product_id：商品 id，用于关联商品表
 *      product_attribute_id：商品属性 id，用于关联商品属性表
 *      value：商品属性值。手动添加规格或参数的值
 *          参数：单值
 *          规格：多值，多个规格值用逗号隔开
 */
@Mapper
public interface PmsProductAttributeValueDao {

    /**
     * 批量创建
     * @param productAttributeValueList 商品属性值列表
     * @return 影响行数
     */
    int insertList(@Param("list") List<PmsProductAttributeValue> productAttributeValueList);
}
